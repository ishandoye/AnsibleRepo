---
- name: Verify that the OS is allowed
  assert:
    that:
      - ansible_distribution_version not in os_block_list[ansible_os_family]
      - ansible_distribution_major_version in os_allow_list[ansible_os_family]
    fail_msg: "{{ ansible_distribution }} {{ ansible_distribution_version }} is not supported by this playbook"

- name: Create ticket folder
  file:
    path: "/home/rack/{{ ticket_no }}"
    state: directory
    mode: 0755

- name: Get mysql raxfacts
  raxfacts:
    facts:
      - mysql

- name: Check MySQL is present
  assert:
    that:
      - mysql.status is defined
      - mysql.status is not none
    fail_msg: "Unable to obtain a MySQL status, is it installed?"
  tags: mysql_upgrade

- name: Load distro vars file
  include_vars: "{{ ansible_os_family|lower }}_{{ ansible_distribution_major_version }}.yml"

- name: Check mysql.version.vendor
  assert:
    that:
      - mysql.version.vendor is defined
      - mysql.version.vendor != "unknown"
    fail_msg: "Unable to get vendor name. mysql.version.vendor is not defined or it is set to 'unknown'"
  tags: mysql_upgrade

- name: Set mysql service name
  set_fact:
    mysql_service_name: "{{ lookup('vars', mysql.version.vendor + '_service') }}"
  tags: mysql_upgrade

- name: Run distro prereqs
  include: "prereqs_{{ ansible_os_family|lower }}.yml"

- name: Backup yum.conf and remove MySQL exclusions  # noqa 306
  # false positive from pipe in sed string
  shell: >
    /bin/cp -f /etc/yum.conf /home/rack/{{ ticket_no }} &&
    sed -i 's/mysql[^ \s]*\|percona[^ \s]*\|maria[^ \s]*//gI' /etc/yum.conf
  args:
    creates: /home/rack/{{ ticket_no }}/yum.conf
  when: ansible_os_family == "RedHat"

- name: Find my.cnf file
  stat:
    path: "{{ item }}"
  loop:
    - "/etc/my.cnf"
    - "/etc/mysql/my.cnf"
  register: my_cnf_file

- name: Set my.cnf file path
  set_fact:
    my_cnf: "{{ item.item }}"
  with_items: "{{ my_cnf_file.results }}"
  when: item.stat.exists

- name: Stat datadir
  stat:
    path: "{{ mysql_vars['results'][0]['msg'][:-1] }}"
  register: datadir

- name: Set datadir
  set_fact:
    mysql_datadir: "{{ mysql_vars['results'][0]['msg'][:-1] }}"
  when: (datadir.stat.isdir is defined and datadir.stat.isdir) or (datadir.stat.islnk is defined and datadir.stat.islnk)
  tags: mysql_upgrade

- name: Set tmpdir
  set_fact:
    mysql_tmpdir: "{{ mysql_vars['results'][1]['msg'] }}"
  tags: mysql_upgrade

- name: Show MySQL datadir
  debug:
    var: mysql_datadir
    verbosity: 3

- name: Debug if already on latest
  debug:
    msg: "This device is already running the latest version of MySQL"
  when: mysql.version.full.startswith('8.0') or mysql.version.full.startswith('11.0')

- name: Stop running if MySQL is already at desired version
  meta: end_host
  when: mysql.version.full.startswith('8.0') or mysql.version.full.startswith('11.0')
  tags: mysql_upgrade

- name: Back up MySQL datadir
  block:
    - name: Stop MySQL for backups
      service:
        name: "{{ mysql_service_name }}"
        state: stopped
      register: mysql_status
      tags: mysql_upgrade

    - name: Backup using rsync  # noqa 303
      # Have to use shell module as synchronize depends on sshpass
      shell: >
        rsync -a
        "{{ mysql_datadir }}/"
        "{{ mysql_datadir }}.{{ ansible_date_time.date }}/"
      when: mysql_status.changed
      async: "{{ backup_time | default(28800, true) }}"
      poll: 10
      tags: mysql_upgrade

    - name: Start MySQL after backup
      service:
        name: "{{ mysql_service_name }}"
        state: started
      register: mysql_status
  when: backup_method|lower == "rsync"
  rescue:
    - name: Ensure MySQL remains up if backup fails
      service:
        name: "{{ mysql_service_name }}"
        state: started
      register: mysql_status
    - name: Stop play as we have no backup
      fail:
        msg: "We don't have a backup. Ending play."

- name: Backup using holland
  command: /usr/sbin/holland bk
  when: backup_method|lower == "holland"
  async: "{{ backup_time | default(28800, true) }}"
  poll: 10
  tags: mysql_upgrade

- name: Download upgrade_mysql_config.py
  copy:
    src: upgrade_mysql_config.py
    dest: "/home/rack/{{ ticket_no }}/upgrade_mysql_config.py"
    mode: 0644

- name: Upgrade MySQL
  include: mysql.yml
  when: '"mysql" in mysql.version.vendor'
  tags: mysql_upgrade

- name: Upgrade Percona
  include: percona.yml
  when: '"percona" in mysql.version.vendor'
  tags: mysql_upgrade

- name: Upgrade MariaDB
  include: maria.yml
  when: '"maria" in mysql.version.vendor'
  tags: mysql_upgrade

- name: Restore yum.conf  # noqa 301
  # This command will always overwrite /etc/yum.conf
  command: /bin/mv -f /home/rack/{{ ticket_no }}/yum.conf /etc/yum.conf
  when: ansible_os_family == "RedHat"

- name: Display rollback information
  include: rollback.yml
