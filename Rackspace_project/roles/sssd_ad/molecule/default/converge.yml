---
- name: Test SSSD-AD intensive
  hosts: all
  become: false
  gather_facts: true
  vars:
    krb_host: _kerberos._tcp.{{ intensive_dc|default('LON') }}.intensive.int.
  pre_tasks:
    - name: Setup {{ type }} join variables
      include_vars:
        file: "{{ type|lower }}.yml"

    - name: Check if dnspython module is available
      pip:
        name: dnspython
        state: present
      register: dnspython_present
      failed_when: dnspython_present is changed
      delegate_to: localhost
      run_once: true
      check_mode: true

    - name: Check kerberos connectivity
      wait_for:
        port: "{{ item.port }}"
        host: "{{ item.target }}"
        timeout: 2
        connect_timeout: 2
      loop: >
        {{
          lookup('community.general.dig', krb_host, 'qtype=SRV', 'flat=0',
            wantlist=True)
        }}
      loop_control:
        label: "{{ item.target }}:{{ item.port }}"
      register: krb_connections
      ignore_errors: true
      delegate_to: localhost
      run_once: true

    - name: Check that at least one kerberos host was available
      assert:
        that:
          - krb_connections.results|rejectattr('failed')|length > 0
        fail_msg: >
          No keberos hosts were reachable. You must run these tests from
          somewhere with access to the Intensive domain
          (i.e. NOT your workstation)
        quiet: true

    - name: Check we have username & password available
      assert:
        that:
          - JOINACCT|default('', true)|length > 0
          - JOINPWD|default('', true)|length > 0
        fail_msg: >
          You must set the environment variables INTENSIVE_USERNAME and
          INTENSIVE_PASSWORD with the credentials that will be used for testing
          the domain join. This should normally be your generated intensive
          credentials
        quiet: true

  roles:
    - role: sssd_ad
      apply:
        become: true

  post_tasks:
    - name: Post-tasks for testing "customer" join to globalrs.rack.space
      block:
        - name: Destroy any existing kerberos user tickets
          shell: /usr/bin/kdestroy  # noqa 301
          register: kdestroy_rslt
          changed_when: >
            kdestroy_rslt.stderr is not search('No credentials cache found')

        - name: Check we can obtain a kerberos user ticket  # noqa 301 306
          shell: >
            echo {{ JOINPWD|quote }} | kinit -C {{ JOINACCT|quote }}
          register: kinit_rslt
          failed_when: false
          changed_when: kinit_rslt.rc|int == 0
          no_log: true

        - name: Fail if we didn't get a kerberos ticket
          fail:
            msg: "{{ kinit_rslt.stderr }}"
          when: kinit_rslt.rc|int != 0

        - name: Add computer to {{ rs_customer }}-AllUsers group  # noqa 301
          command: >
            /usr/sbin/adcli add-member --login-ccache=/tmp/krb5cc_0
            --domain={{ ad_domain|lower }}
            {{ rs_customer }}-AllUsers "{{ netbiosname }}$"
          register: add_group_rslt
          until: add_group_rslt.rc == 0
          delay: 30
          retries: 2
          ignore_errors: true

        - name: Restart sssd to pick up group change
          service:
            name: sssd
            state: restarted
          when: add_group_rslt.rc == 0
      always:
        - name: Destroy any existing kerberos user tickets
          shell: /usr/bin/kdestroy  # noqa 301
          register: kdestroy_rslt
          changed_when: >
            kdestroy_rslt.stderr is not search('No credentials cache found')
      when:
        - type|lower == 'customer'
        - customer_domain|lower == 'globalrs.rack.space'
