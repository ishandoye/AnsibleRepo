---
- name: Get existing FQDN hostname, shortname and domain prefix
  set_fact:
     current_hostname: "{{ ansible_fqdn }}"
     current_hostname_short: "{{ ansible_hostname }}"
     current_domain_prefix: "{{ ansible_domain }}"
     new_hostname_short: "{{ new_hostname.split('.')[0] }}"
     new_domain_prefix:  "{{ new_hostname.split('.')[1:]|join('.') }}"

- name: set hostname
  hostname: name={{ new_hostname }}
  register: set_hostname
  when:
     - new_hostname is defined
     - current_hostname is defined

- name: update /etc/hosts with new FQDN and short name
  replace:
     dest: /etc/hosts
     regexp: "{{ item.regexp }}"
     replace: "{{ item.replace }}"
     backup: yes
  with_items:
    - { regexp: '^([^#]+?\s+){{ current_hostname|regex_escape }}(\s+|$)', replace: '\g<1>{{ new_hostname }}\g<2>' }
    - { regexp: '^([^#]+?\s+){{ current_hostname_short|regex_escape }}(\s+|$)', replace: '\g<1>{{ new_hostname_short }}\g<2>' }
  when: set_hostname is successful

- name: update /etc/hostname with FQDN
  lineinfile:
     backrefs: yes
     dest: /etc/hostname
     regexp: '^{{current_hostname}}$'
     line: '{{ new_hostname }}'
     backup: yes
  when: ansible_os_family == 'Debian'

- name: Set regex pattern of a hostname
  set_fact:
     pattern: "^(([a-zA-Z]{1})|([a-zA-Z]{2})|([a-zA-Z]{1}[0-9]{1})|([0-9]{1}[a-zA-Z]{1})|([a-zA-Z0-9][a-zA-Z0-9-_]{1,61}[a-zA-Z0-9]))\\.([a-zA-Z]{2,6}|[a-zA-Z0-9-]{2,30}\\.[a-zA-Z]{2,3})$"

- name: Update hostname on /etc/sysconfig/network
  lineinfile:
     backrefs: yes
     dest: /etc/sysconfig/network
     regexp: "{{ item.regexp }}"
     line: "{{ item.line }}"
     backup: yes
  with_items:
     - regexp: '^HOSTNAME=.*'
       line: 'HOSTNAME={{ new_hostname }}'
  when: ansible_os_family == 'RedHat'

- name: Update domain name on /etc/sysconfig/network
  lineinfile:
     backrefs: yes
     dest: /etc/sysconfig/network
     regexp: "{{ item.regexp }}"
     line: "{{ item.line }}"
     backup: yes
  with_items:
     - regexp: '^DOMAINNAME=.*'
       line: 'DOMAINNAME={{ new_domain_prefix }}'
  when:
    - ansible_os_family == 'RedHat'
    - new_domain_prefix is match(pattern)

- name: Update domain and search fields on /etc/resolv.conf
  lineinfile:
     backrefs: yes
     dest: /etc/resolv.conf
     regexp: "{{ item.regexp }}"
     line: "{{ item.line }}"
     backup: yes
  with_items:
     - { regexp: '^domain\s+.*$', line: 'domain {{ new_domain_prefix }}' }
     - { regexp: '^search\s+.*$', line: 'search {{ new_domain_prefix }}' }
  when:
    - new_domain_prefix is match(pattern)

- name: Check /etc/postfix/mydomains file exists
  stat: path=/etc/postfix/mydomains
  register: mydomains_file

- name: Check existence of postmap binary
  stat: path=/usr/sbin/postmap
  register: postmap_file

- name: remove old hostname from  /etc/postfix/mydomains
  lineinfile:
     path: /etc/postfix/mydomains
     regexp: '^{{ current_hostname }}\s+OK$'
     state: absent
     backup: yes
  when: ( mydomains_file.stat.exists == True ) and ( current_hostname != new_hostname )
  notify: Run postmap against /etc/postfix/mydomains
- name: ensure new hostname is present in /etc/postfix/mydomains
  lineinfile:
     path: /etc/postfix/mydomains
     line: '{{ new_hostname }}  OK'
     state: present
     backup: yes
  when: mydomains_file.stat.exists == True
  notify: Run postmap against /etc/postfix/mydomains

- name: Check /etc/postfix/main.cf file exists
  stat: path=/etc/postfix/main.cf
  register: main_cf_file

- name: Update myhostname variable on /etc/postfix/main.cf
  lineinfile:
     backrefs: yes
     dest: /etc/postfix/main.cf
     regexp: "{{ item.regexp }}"
     line: "{{ item.line }}"
     backup: yes
  with_items:
     - { regexp: '^myhostname={{ current_hostname }}', line: 'myhostname={{ new_hostname }}' }
  when: main_cf_file.stat.exists == True
  notify:
      - Restart postfix

- name: Restart syslog
  service:
    name: syslog
    state: restarted
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version|int  < 6
    - set_hostname is changed

- name: Restart rsyslog
  service:
    name: rsyslog
    state: restarted
  when: ((ansible_os_family == "RedHat" and ansible_distribution_major_version|int >= 6) or
        (ansible_os_family == "Debian")) and set_hostname is changed

- name: Verify mysql login access
  shell: mysql -e "SELECT VERSION();"
  register: mysql_access
  failed_when: false
  changed_when: false
- include: mysql_check.yml
  when: mysql_access.rc == 0
